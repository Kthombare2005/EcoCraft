const express = require("express");
const axios = require("axios");
const cors = require("cors");

const app = express();
const PORT = 5000;

app.use(cors());
app.use(express.json());

const GAMINI_API_KEY = "AIzaSyA69iAVD8SNk7UNULLPvhOloewlGkJww2g";
const GAMINI_API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent";

// Endpoint to find nearby scrapers
app.post("/api/nearby-scrapers", async (req, res) => {
  const { userLocation, scrapType } = req.body;

  if (!userLocation || !scrapType) {
    return res.status(400).json({ error: "Missing user location or scrap type" });
  }

  const prompt = `
    Given the user's location: "${userLocation}" and scrap type: "${scrapType}", generate a list of nearby scrapers and their details (name, address, contact information, and distance from the user's location).
    Respond in JSON format with an array of objects like:
    [
      {
        "name": "Scraper 1",
        "shop_address": "Address 1",
        "contact": "9876543210",
        "distance": "5 km"
      },
      {
        "name": "Scraper 2",
        "shop_address": "Address 2",
        "contact": "9876543211",
        "distance": "8 km"
      }
    ]
  `;

  try {
    const response = await axios.post(
      GAMINI_API_URL,
      {
        prompt,
        key: GAMINI_API_KEY,
      },
      {
        headers: {
          "Content-Type": "application/json",
        },
      }
    );

    const { candidates } = response.data;

    if (candidates && candidates.length > 0) {
      const generatedContent = JSON.parse(candidates[0].output);
      res.json(generatedContent);
    } else {
      res.status(500).json({ error: "No data generated by Gamini" });
    }
  } catch (error) {
    console.error("Error querying Gamini:", error.message || error);
    res.status(500).json({ error: "Failed to query Gamini API" });
  }
});

// Start the server
app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});
